/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package screens;

import classes.Apuesta;
import classes.Baraja;
import classes.Carta;
import classes.CasaDeApuestas;
import classes.Ex;
import classes.Jugador;
import classes.OrdenaCartas;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import javax.swing.ImageIcon;

/**
 *
 * @author mr.blissfulgrin
 */
public class Game extends javax.swing.JFrame {

    /**
     * Creates new form Game
     */
    public Game() {
        this.b = new Baraja();
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {
        java.awt.GridBagConstraints gridBagConstraints;

        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jPanel19 = new javax.swing.JPanel();
        jPanel20 = new javax.swing.JPanel();
        salir = new javax.swing.JButton();
        txt = new javax.swing.JLabel();
        jPanel21 = new javax.swing.JPanel();
        jPanel22 = new javax.swing.JPanel();
        jPanel23 = new javax.swing.JPanel();
        jPanel24 = new javax.swing.JPanel();
        m1 = new javax.swing.JLabel();
        m2 = new javax.swing.JLabel();
        m3 = new javax.swing.JLabel();
        m4 = new javax.swing.JLabel();
        m5 = new javax.swing.JLabel();
        jPanel25 = new javax.swing.JPanel();
        j1 = new javax.swing.JLabel();
        j2 = new javax.swing.JLabel();
        j3 = new javax.swing.JLabel();
        j4 = new javax.swing.JLabel();
        j5 = new javax.swing.JLabel();
        jPanel26 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        d2 = new javax.swing.JLabel();
        d1 = new javax.swing.JLabel();
        mazo = new javax.swing.JLabel();
        jPanel28 = new javax.swing.JPanel();
        txtb = new javax.swing.JLabel();
        jPanel29 = new javax.swing.JPanel();
        jPanel30 = new javax.swing.JPanel();
        pasar = new javax.swing.JButton();
        descartar = new javax.swing.JButton();
        apostar = new javax.swing.JButton();
        dinero = new javax.swing.JSpinner();
        jPanel31 = new javax.swing.JPanel();
        jPanel32 = new javax.swing.JPanel();
        nombre = new javax.swing.JLabel();
        saldo = new javax.swing.JLabel();
        jPanel33 = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Game");
        setIconImage(new ImageIcon(getClass().getResource("/imgages/Icono.png")).getImage() );
        setResizable(false);
        getContentPane().setLayout(new java.awt.CardLayout());

        jPanel17.setBackground(new java.awt.Color(109, 131, 31));
        jPanel17.setForeground(new java.awt.Color(109, 131, 31));
        jPanel17.setLayout(new java.awt.CardLayout(20, 20));

        jPanel18.setBackground(new java.awt.Color(109, 131, 31));
        jPanel18.setLayout(new java.awt.GridBagLayout());

        jPanel19.setBackground(new java.awt.Color(109, 131, 31));
        jPanel19.setLayout(new java.awt.CardLayout());

        jPanel20.setBackground(new java.awt.Color(109, 131, 31));
        jPanel20.setLayout(new java.awt.GridBagLayout());

        salir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/cruz.png"))); // NOI18N
        salir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                salirActionPerformed(evt);
            }
        });
        jPanel20.add(salir, new java.awt.GridBagConstraints());

        txt.setBackground(new java.awt.Color(0, 74, 0));
        txt.setFont(new java.awt.Font("Malayalam MN", 1, 36)); // NOI18N
        txt.setForeground(new java.awt.Color(223, 223, 223));
        txt.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        txt.setText("Haga clik en el mazo para repartir las cartas");
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.weightx = 0.1;
        jPanel20.add(txt, gridBagConstraints);

        jPanel19.add(jPanel20, "card2");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.ipady = 12;
        jPanel18.add(jPanel19, gridBagConstraints);

        jPanel21.setBackground(new java.awt.Color(109, 131, 31));
        jPanel21.setLayout(new java.awt.GridBagLayout());

        jPanel22.setBackground(new java.awt.Color(109, 131, 31));
        jPanel22.setLayout(new java.awt.CardLayout());

        jPanel23.setBackground(new java.awt.Color(109, 131, 31));
        jPanel23.setLayout(new java.awt.GridLayout(0, 1));

        jPanel24.setBackground(new java.awt.Color(109, 131, 31));
        jPanel24.setLayout(new java.awt.GridBagLayout());

        m1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel24.add(m1, gridBagConstraints);

        m2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel24.add(m2, gridBagConstraints);

        m3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel24.add(m3, gridBagConstraints);

        m4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel24.add(m4, gridBagConstraints);

        m5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel24.add(m5, gridBagConstraints);

        jPanel23.add(jPanel24);

        jPanel25.setBackground(new java.awt.Color(109, 131, 31));
        jPanel25.setLayout(new java.awt.GridBagLayout());

        j1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        j1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j1MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel25.add(j1, gridBagConstraints);

        j2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        j2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j2MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel25.add(j2, gridBagConstraints);

        j3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        j3.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j3MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel25.add(j3, gridBagConstraints);

        j4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        j4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j4MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel25.add(j4, gridBagConstraints);

        j5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        j5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                j5MouseClicked(evt);
            }
        });
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 15;
        gridBagConstraints.ipady = 15;
        gridBagConstraints.weightx = 0.1;
        gridBagConstraints.weighty = 0.1;
        jPanel25.add(j5, gridBagConstraints);

        jPanel23.add(jPanel25);

        jPanel22.add(jPanel23, "card2");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weightx = 1.0;
        gridBagConstraints.weighty = 2.0;
        jPanel21.add(jPanel22, gridBagConstraints);

        jPanel26.setBackground(new java.awt.Color(109, 131, 31));
        jPanel26.setLayout(new java.awt.CardLayout());

        jPanel27.setBackground(new java.awt.Color(109, 131, 31));
        jPanel27.setLayout(new java.awt.GridLayout(0, 1));

        d2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        jPanel27.add(d2);

        d1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/void.png"))); // NOI18N
        jPanel27.add(d1);

        mazo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/carta.jpg"))); // NOI18N
        mazo.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mazoMouseClicked(evt);
            }
        });
        jPanel27.add(mazo);

        jPanel26.add(jPanel27, "card2");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 20;
        gridBagConstraints.ipady = 20;
        gridBagConstraints.weighty = 2.0;
        jPanel21.add(jPanel26, gridBagConstraints);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 1;
        gridBagConstraints.fill = java.awt.GridBagConstraints.BOTH;
        gridBagConstraints.ipadx = 10;
        gridBagConstraints.weightx = 0.6;
        gridBagConstraints.weighty = 0.1;
        jPanel18.add(jPanel21, gridBagConstraints);

        jPanel28.setBackground(new java.awt.Color(109, 131, 31));

        txtb.setBackground(new java.awt.Color(0, 71, 0));
        txtb.setFont(new java.awt.Font("Malayalam MN", 1, 14)); // NOI18N
        txtb.setForeground(new java.awt.Color(223, 223, 223));
        txtb.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jPanel28.add(txtb);

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 2;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        jPanel18.add(jPanel28, gridBagConstraints);

        jPanel29.setBackground(new java.awt.Color(109, 131, 31));
        jPanel29.setLayout(new java.awt.CardLayout());

        jPanel30.setBackground(new java.awt.Color(109, 131, 31));
        jPanel30.setLayout(new java.awt.GridLayout(1, 0, 0, 7));

        pasar.setBackground(new java.awt.Color(153, 153, 0));
        pasar.setFont(new java.awt.Font("Malayalam MN", 1, 13)); // NOI18N
        pasar.setText("PASAR");
        pasar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pasarActionPerformed(evt);
            }
        });
        jPanel30.add(pasar);

        descartar.setBackground(new java.awt.Color(102, 153, 0));
        descartar.setFont(new java.awt.Font("Malayalam MN", 1, 13)); // NOI18N
        descartar.setText("DESCARTAR");
        descartar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                descartarActionPerformed(evt);
            }
        });
        jPanel30.add(descartar);

        apostar.setBackground(new java.awt.Color(51, 255, 0));
        apostar.setFont(new java.awt.Font("Malayalam MN", 1, 13)); // NOI18N
        apostar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imgages/Apostar.png"))); // NOI18N
        apostar.setText("APOSTAR");
        apostar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                apostarActionPerformed(evt);
            }
        });
        jPanel30.add(apostar);

        dinero.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                dineroStateChanged(evt);
            }
        });
        jPanel30.add(dinero);

        jPanel29.add(jPanel30, "card2");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 3;
        gridBagConstraints.ipadx = 10;
        jPanel18.add(jPanel29, gridBagConstraints);

        jPanel31.setBackground(new java.awt.Color(109, 131, 31));
        jPanel31.setLayout(new java.awt.CardLayout());

        jPanel32.setBackground(new java.awt.Color(109, 131, 31));
        jPanel32.setLayout(new java.awt.GridBagLayout());

        nombre.setFont(new java.awt.Font("Malayalam MN", 1, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.ipadx = 2;
        jPanel32.add(nombre, gridBagConstraints);

        saldo.setFont(new java.awt.Font("Malayalam MN", 1, 18)); // NOI18N
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 2;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.ipadx = 2;
        jPanel32.add(saldo, gridBagConstraints);

        jPanel33.setBackground(new java.awt.Color(102, 153, 0));
        jPanel33.setLayout(new java.awt.CardLayout());
        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 1;
        gridBagConstraints.gridy = 0;
        gridBagConstraints.weightx = 0.1;
        jPanel32.add(jPanel33, gridBagConstraints);

        jPanel31.add(jPanel32, "card2");

        gridBagConstraints = new java.awt.GridBagConstraints();
        gridBagConstraints.gridx = 0;
        gridBagConstraints.gridy = 4;
        gridBagConstraints.fill = java.awt.GridBagConstraints.HORIZONTAL;
        gridBagConstraints.ipadx = 10;
        jPanel18.add(jPanel31, gridBagConstraints);

        jPanel17.add(jPanel18, "card2");

        getContentPane().add(jPanel17, "card3");

        setSize(new java.awt.Dimension(1000, 822));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private Baraja b = new Baraja();
    
    private final boolean control[]={true, true, true, true, true};
    
    private boolean registrado;
    private int fase = 0;
    private int contador=0;
    
    private double apuesta=0;
    
    private final ArrayList < Carta > cartasJ = new ArrayList <>();
    private final int orden [] = new int[5];
    
    private final ArrayList < Carta > cartasM = new ArrayList <>();
    private final ArrayList < Carta > cartasD = new ArrayList <>();
    
    public void setRegistrado(boolean registrado)
    {
        this.registrado=registrado;
    }
    
    private void salirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_salirActionPerformed
        if (registrado)
        {
            try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("***************** SALIÓ DEL JUEGO*******************************\n");
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.println("*****************************************************************\n");
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            Dentro d = new Dentro();
            d.setVisible(true);
            this.setVisible(false);
            this.dispose();
        }
        else
        {
            NoRegistradoSaliente n = new NoRegistradoSaliente();
            n.setVisible(true);
            this.setVisible(false);
            this.dispose();
        }
    }//GEN-LAST:event_salirActionPerformed

    private void mazoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mazoMouseClicked
        if (fase == 6)
        {
            contador=0;
            txtb.setText("(Nada seleccionado) Si no desea descartar ninguna carta pulse pasar");
        }
        if (fase ==4 )
        {
           ImageIcon cartaTrasera = new ImageIcon("./src/imgages/carta.jpg");
            switch (contador)
            {
                case 0:
                    j4.setIcon(cartaTrasera);
                    contador++;
                    break;
                case 1:
                    j5.setIcon(cartaTrasera);
                    txt.setText("Pulse las cartas para darles la vuelta");
                    fase = 5;
                    contador=3;
                    break;
            } 
        }
        if (fase == 2)
        {
            contador=0;
            txtb.setText("(Nada seleccionado) Si no desea descartar ninguna carta pulse pasar");
        }
        if (fase == 0)
        {
            ImageIcon cartaTrasera = new ImageIcon("./src/imgages/carta.jpg");
            switch (contador)
            {
                case 0:
                    j1.setIcon(cartaTrasera);
                    contador++;
                    break;
                case 1:
                    j2.setIcon(cartaTrasera);
                    contador++;
                    break;
                case 2:
                    j3.setIcon(cartaTrasera);
                    txt.setText("Pulse las cartas para darles la vuelta");
                    fase = 1;
                    contador=0;
                    break;
            }
        }
    }//GEN-LAST:event_mazoMouseClicked

    private void j1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j1MouseClicked
        if (fase == 6)
        {
            contador=1;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 2)
        {
            contador=1;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 1 & control[0])
        {
            control[0]=false;
            orden[0]=contador;
            cartasJ.addAll(b.darCartas(1));
            j1.setIcon(cartasJ.get(cartasJ.size()-1).getImagen());
            if (contador==2)
            {
                fase =2;
                contador=0;
                txt.setText("Seleccione luna carta para descartar");
                txtb.setText("(Nada seleccionado) Si no desea descartar ninguna carta pulse pasar");
            }
            else 
                contador++;
        }
    }//GEN-LAST:event_j1MouseClicked

    private void j2MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j2MouseClicked
        if (fase == 6)
        {
            contador=2;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 2)
        {
            contador=2;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 1 & control[1])
        {
            control[1]=false;
            orden[1]=contador;
            cartasJ.addAll(b.darCartas(1));
            j2.setIcon(cartasJ.get(cartasJ.size()-1).getImagen());
            if (contador==2)
            {
                fase =2;
                contador=0;
                txt.setText("Seleccione una carta para descartar");
                txtb.setText("(Nada seleccionado) Si no desea descartar ninguna carta pulse pasar");
            }
            else 
                contador++;
        }
    }//GEN-LAST:event_j2MouseClicked

    private void j3MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j3MouseClicked
        if (fase == 6)
        {
            contador=3;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 2)
        {
            contador=3;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 1 & control[2])
        {
            control[2]=false;
            orden[2]=contador;
            cartasJ.addAll(b.darCartas(1));
            j3.setIcon(cartasJ.get(cartasJ.size()-1).getImagen());
            if (contador==2)
            {
                fase =2;
                contador=0;
                txt.setText("Seleccione una carta descartar");
                txtb.setText("(Nada seleccionado) Si no desea descartar ninguna carta pulse pasar");
            }
            else 
                contador++;
        }
    }//GEN-LAST:event_j3MouseClicked

    private void descartarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_descartarActionPerformed
        if (fase == 8)
        {
            txt.setText("Haga click en el mazo para repartir las cartas");
            txtb.setText("");
            ImageIcon vacio = new ImageIcon("./src/imgages/void.png");
            j1.setIcon(vacio);
            j2.setIcon(vacio);
            j3.setIcon(vacio);
            j4.setIcon(vacio);
            j5.setIcon(vacio);
            m1.setIcon(vacio);
            m2.setIcon(vacio);
            m3.setIcon(vacio);
            m4.setIcon(vacio);
            m5.setIcon(vacio);
            d1.setIcon(vacio);
            d2.setIcon(vacio);
            cartasJ.clear();
            cartasM.clear();
            cartasD.clear();
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
            fase = 0;
            apuesta=0;
            contador=0;
            for (int x=0; x<control.length;x++)
            {
                control[x]=true;
            }
            
            b = new Baraja();
            CasaDeApuestas.addPartida();
            if (registrado)
            {
                Dentro.jugador().añadirPartida();
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("******************* Juego Nuevo ***************************\n");
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            }
        }
        if (fase == 6)
        {
            if (contador!=0)
            {
                cartasD.add(cartasJ.get(orden[contador-1]));
                d2.setIcon(cartasD.get(cartasD.size()-1).getImagen());
                cartasJ.remove(orden[contador-1]);
                cartasJ.addAll(orden[contador-1], b.darCartas(1));
                switch (contador)
                {
                    case 1:
                        j1.setIcon(cartasJ.get(contador-1).getImagen());
                        break;
                    case 2:
                        j2.setIcon(cartasJ.get(contador-1).getImagen());
                        break;
                    case 3:
                        j3.setIcon(cartasJ.get(contador-1).getImagen());
                        break;
                    case 4:
                        j4.setIcon(cartasJ.get(contador-1).getImagen());
                        break;
                    case 5:
                        j5.setIcon(cartasJ.get(contador-1).getImagen());
                        break;      
                }
                contador=0;
                fase = 7;
                txt.setText("Seleccione su apuesta, minimo 10$");
                txtb.setText("Si no desea apostar pulse pasar, se le descontarán 5$");
                cartasM.addAll(b.darCartas(2));
                ImageIcon cartaTrasera = new ImageIcon("./src/imgages/carta.jpg");
                m4.setIcon(cartaTrasera);
                m5.setIcon(cartaTrasera);
                dinero.setValue(10);
            }
        }
        if (fase == 2)
        {
            if (contador !=0)
            {
                cartasD.add(cartasJ.get(orden[contador-1]));
                d1.setIcon(cartasD.get(cartasD.size()-1).getImagen());
                cartasJ.remove(orden[contador-1]);
                cartasJ.addAll(orden[contador-1], b.darCartas(1));
                switch (contador)
                {
                    case 1:
                        j1.setIcon(cartasJ.get(contador-1).getImagen());
                        break;
                    case 2:
                        j2.setIcon(cartasJ.get(contador-1).getImagen());
                        break;
                    case 3:
                        j3.setIcon(cartasJ.get(contador-1).getImagen());
                        break;       
                }
                contador=0;
                fase = 3;
                txt.setText("Seleccione su apuesta, minimo 10$");
                txtb.setText("Si no desea apostar pulse pasar, se le descontarán 5$");
                cartasM.addAll(b.darCartas(3));
                ImageIcon cartaTrasera = new ImageIcon("./src/imgages/carta.jpg");
                m1.setIcon(cartaTrasera);
                m2.setIcon(cartaTrasera);
                m3.setIcon(cartaTrasera);
                dinero.setValue(10);
            }
        }
    }//GEN-LAST:event_descartarActionPerformed

    private void pasarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pasarActionPerformed
        if (fase == 8)
        {
            txt.setText("Haga click en el mazo para repartir las cartas");
            txtb.setText("");
            ImageIcon vacio = new ImageIcon("./src/imgages/void.png");
            j1.setIcon(vacio);
            j2.setIcon(vacio);
            j3.setIcon(vacio);
            j4.setIcon(vacio);
            j5.setIcon(vacio);
            m1.setIcon(vacio);
            m2.setIcon(vacio);
            m3.setIcon(vacio);
            m4.setIcon(vacio);
            m5.setIcon(vacio);
            d1.setIcon(vacio);
            d2.setIcon(vacio);
            cartasJ.clear();
            cartasM.clear();
            cartasD.clear();
            contador=0;
            for (int x=0; x<control.length;x++)
            {
                control[x]=true;
            }
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
            fase = 0;
            apuesta=0;
            b = new Baraja();
            CasaDeApuestas.addPartida();
            if (registrado)
            {
                Dentro.jugador().añadirPartida();
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("******************* Juego Nuevo ***************************\n");
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            }
        }
        if (fase == 7)
        {
            txt.setText("Haga click en el mazo para repartir las cartas");
            txtb.setText("");
            ImageIcon vacio = new ImageIcon("./src/imgages/void.png");
            j1.setIcon(vacio);
            j2.setIcon(vacio);
            j3.setIcon(vacio);
            j4.setIcon(vacio);
            j5.setIcon(vacio);
            m1.setIcon(vacio);
            m2.setIcon(vacio);
            m3.setIcon(vacio);
            m4.setIcon(vacio);
            m5.setIcon(vacio);
            d1.setIcon(vacio);
            d2.setIcon(vacio);
            contador=0;
            for (int x=0; x<control.length;x++)
            {
                control[x]=true;
            }
            cartasJ.clear();
            cartasM.clear();
            cartasD.clear();
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
            fase = 0;
            apuesta=0;
            b = new Baraja();
            jugador.setSaldo(jugador.getSaldo()-5);
            CasaDeApuestas.addPartida();
            if (registrado)
            {
                CasaDeApuestas.dineroRegistrado(5);
                Dentro.jugador().añadirPartida();
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("------------ Apuesta minima realizada --------------------------\n");
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.println("El jugador pasó y se le dieron nuevas cartas");
                    salida.println("Nuevo saldo: "+jugador.getSaldo());
                    salida.println("-----------------------------------------------------------\n");
                    salida.println("******************* Juego Nuevo ***************************\n");
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            }
            else 
                CasaDeApuestas.dineroOcasional(5);
        }
        if (fase==6&contador==0)
        {
            ImageIcon Pasar = new ImageIcon("./src/imgages/pasar.png");
            d2.setIcon(Pasar);
            fase=7;
            txt.setText("Seleccione su apuesta");
            txtb.setText("Si no desea apostar pulse pasar, se le descontarán 5$");
            cartasM.addAll(b.darCartas(2));
            ImageIcon cartaTrasera = new ImageIcon("./src/imgages/carta.jpg");
            m4.setIcon(cartaTrasera);
            m5.setIcon(cartaTrasera);
            dinero.setValue(10);
        }
        if (fase == 3)
        {
            txt.setText("Haga click en el mazo para repartir las cartas");
            txtb.setText("");
            ImageIcon vacio = new ImageIcon("./src/imgages/void.png");
            j1.setIcon(vacio);
            j2.setIcon(vacio);
            j3.setIcon(vacio);
            j4.setIcon(vacio);
            j5.setIcon(vacio);
            m1.setIcon(vacio);
            m2.setIcon(vacio);
            m3.setIcon(vacio);
            m4.setIcon(vacio);
            m5.setIcon(vacio);
            d1.setIcon(vacio);
            d2.setIcon(vacio);
            contador=0;
            for (int x=0; x<control.length;x++)
            {
                control[x]=true;
            }
            cartasJ.clear();
            cartasM.clear();
            cartasD.clear();
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
            fase = 0;
            apuesta=0;
            b = new Baraja();
            jugador.setSaldo(jugador.getSaldo()-5);
            CasaDeApuestas.addPartida();
            if (registrado)
            {
                CasaDeApuestas.dineroRegistrado(5);
                Dentro.jugador().añadirPartida();
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("------------ Apuesta minima realizada --------------------------\n");
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.println("El jugador pasó y se le dieron nuevas cartas");
                    salida.println("Nuevo saldo: "+jugador.getSaldo());
                    salida.println("-----------------------------------------------------------\n");
                    salida.println("******************* Juego Nuevo ***************************\n");
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            }
            else
                CasaDeApuestas.dineroOcasional(5);
        }
        if (fase==2&contador==0)
        {
            ImageIcon Pasar = new ImageIcon("./src/imgages/pasar.png");
            d1.setIcon(Pasar);
            fase=3;
            txt.setText("Seleccione su apuesta, minimo 10$");
            txtb.setText("Si no desea apostar pulse pasar, se le descontarán 5$");
            cartasM.addAll(b.darCartas(3));
            ImageIcon cartaTrasera = new ImageIcon("./src/imgages/carta.jpg");
            m1.setIcon(cartaTrasera);
            m2.setIcon(cartaTrasera);
            m3.setIcon(cartaTrasera);
            dinero.setValue(10);
        }
    }//GEN-LAST:event_pasarActionPerformed

    private void apostarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_apostarActionPerformed
        if (fase == 8)
        {
            txt.setText("Haga click en el mazo para repartir las cartas");
            txtb.setText("");
            ImageIcon vacio = new ImageIcon("./src/imgages/void.png");
            j1.setIcon(vacio);
            j2.setIcon(vacio);
            j3.setIcon(vacio);
            j4.setIcon(vacio);
            j5.setIcon(vacio);
            m1.setIcon(vacio);
            m2.setIcon(vacio);
            m3.setIcon(vacio);
            m4.setIcon(vacio);
            m5.setIcon(vacio);
            d1.setIcon(vacio);
            d2.setIcon(vacio);
            cartasJ.clear();
            cartasM.clear();
            cartasD.clear();
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
            fase = 0;
            apuesta=0;
            contador=0;
            for (int x=0; x<control.length;x++)
            {
                control[x]=true;
            }
            b = new Baraja();
            try
            {
                if(jugador.getSaldo()<20)
                    throw new Ex("Saldo mínimo 20$");
            }
            catch(Ex e)
            {
                if (registrado)
                {
                    Dentro d = new Dentro();
                    d.setVisible(true);
                    try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                    {
                        DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                        salida.println("***************** SALIÓ DEL JUEGO*******************************\n");
                        salida.println("Salida forzada dinero insuficiente");
                        salida.println(LocalDate.now().format(formatoCorto));
                        salida.println("*****************************************************************\n");
                        salida.close();
                    } 
                    catch (IOException ex) 
                    {
                        Warnning w = new Warnning();
                        w.setTextoW("Error al crear archivo de registro");
                        w.setVisible(true);
                    }
                }
                else
                {
                    NoRegistradoSaliente n = new NoRegistradoSaliente();
                    n.setVisible(true);
                }
                Warnning w = new Warnning();
                w.setTextoW(e.getMessage());
                w.setVisible(true);
                this.setVisible(false);
                this.dispose();
            }
            CasaDeApuestas.addPartida();
            if (registrado)
            {
                Dentro.jugador().añadirPartida();
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("******************* Juego Nuevo ***************************\n");
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            }
        }
        if (fase == 7)
        {
            
            jugador.setSaldo(jugador.getSaldo()-Double.parseDouble(dinero.getValue().toString()));
            apuesta+=Double.parseDouble(dinero.getValue().toString());
            

            cartasJ.sort(new OrdenaCartas());
            
            j1.setIcon(cartasJ.get(0).getImagen());
            j2.setIcon(cartasJ.get(1).getImagen());
            j3.setIcon(cartasJ.get(2).getImagen());
            j4.setIcon(cartasJ.get(3).getImagen());
            j5.setIcon(cartasJ.get(4).getImagen());
            
            cartasM.sort(new OrdenaCartas());
            
            m1.setIcon(cartasM.get(0).getImagen());
            m2.setIcon(cartasM.get(1).getImagen());
            m3.setIcon(cartasM.get(2).getImagen());
            m4.setIcon(cartasM.get(3).getImagen());
            m5.setIcon(cartasM.get(4).getImagen());
            
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
            
            if (registrado)
            {
                CasaDeApuestas.dineroRegistrado(Double.parseDouble(dinero.getValue().toString()));
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("--------------- Apuesta realizada --------------------------\n");  
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.println("En juego: "+apuesta);
                    salida.println("Nuevo saldo: "+jugador.getSaldo());
                    salida.println("-----------------------------------------------------------\n");
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }

                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("--------------- Resultados de la partida --------------------------\n");  
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.println("Dinero en Juego: "+ apuesta);
                    salida.println("Cartas del jugador: ");
                    for (int x =0; x<cartasJ.size()-1; x++)
                    {
                        salida.println("\t"+cartasJ.get(x).toString());
                    }
                    salida.println("Cartas de la máquina: ");
                    for (int x =0; x<cartasM.size()-1; x++)
                    {
                        salida.println("\t"+cartasM.get(x).toString());
                    }
                    salida.println("Cartas descartadas: ");
                    for (int x =0; x<cartasD.size()-1; x++)
                    {
                        salida.println("\t"+cartasD.get(x).toString());
                    }
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
                Carta cartaJ[]= new Carta[5];
                Carta cartaM[]= new Carta[5];
                for (int x=0;x<5;x++)
                {
                    cartaJ[x]=cartasJ.get(x);
                    cartaM[x]=cartasM.get(x);
                }
                Apuesta a = new Apuesta(cartaJ,cartaM,apuesta,true);
                jugador.setSaldo(jugador.getSaldo()+a.verPremio());
                CasaDeApuestas.dineroRegistrado(a.verPremio()*-1);
                txt.setText(a.getTexto());
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    salida.println(a.getTexto());
                    salida.println("Ganancia: "+a.verPremio());
                    salida.println("Nuevo saldo: "+jugador.getSaldo());
                    salida.println("--------------------------------------------------------------\n");  
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            }
 
            else
            {
                CasaDeApuestas.dineroOcasional(Double.parseDouble(dinero.getValue().toString()));
                Carta cartaJ[]= new Carta[5];
                Carta cartaM[]= new Carta[5];
                for (int x=0;x<5;x++)
                {
                    cartaJ[x]=cartasJ.get(x);
                    cartaM[x]=cartasM.get(x);
                }
                Apuesta a = new Apuesta(cartaJ,cartaM,apuesta,false);
                jugador.setSaldo(jugador.getSaldo()+a.verPremio());
                CasaDeApuestas.dineroOcasional(a.verPremio()*-1);
                txt.setText(a.getTexto());
            }
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
            txtb.setText("Pulse cualquier boton para continuar o la x para salir");
            fase=8;
            
        }

        if (fase == 3)
        { 
            jugador.setSaldo(jugador.getSaldo()-Double.parseDouble(dinero.getValue().toString()));
            apuesta+=Double.parseDouble(dinero.getValue().toString());
            if (registrado)
            {
                CasaDeApuestas.dineroRegistrado(Double.parseDouble(dinero.getValue().toString()));
                try (PrintWriter salida = new PrintWriter(new BufferedWriter(new FileWriter("./src/RegistroJugadores/"+jugador.getNIF()+".txt",true)))) 
                {
                    DateTimeFormatter formatoCorto = DateTimeFormatter.ofPattern("dd/MM/yyyy");
                    salida.println("--------------- Apuesta realizada --------------------------\n");  
                    salida.println(LocalDate.now().format(formatoCorto));
                    salida.println("En juego: "+apuesta);
                    salida.println("Nuevo saldo: "+jugador.getSaldo());
                    salida.println("-----------------------------------------------------------\n");
                    salida.close();
                } 
                catch (IOException ex) 
                {
                    Warnning w = new Warnning();
                    w.setTextoW("Error al crear archivo de registro");
                    w.setVisible(true);
                }
            }
            
            else
                CasaDeApuestas.dineroOcasional(Double.parseDouble(dinero.getValue().toString()));
            fase=4;
            txt.setText("Haga click en el mazo para repartir cartas");
            txtb.setText("");
            saldo.setText("Saldo: "+jugador.getSaldo()+"$");
        }

    }//GEN-LAST:event_apostarActionPerformed

    private void dineroStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_dineroStateChanged
        if (fase == 3)
        {
            if (Double.parseDouble(dinero.getValue().toString())<10)
            {
                dinero.setValue(10);
                Warnning w = new Warnning();
                w.setTextoW("La apuesta minima son 10$");
                w.setVisible(true);
            }
            if (Double.parseDouble(dinero.getValue().toString())>jugador.getSaldo()-10)
            {
                dinero.setValue(jugador.getSaldo()-10);
                Warnning w = new Warnning();
                w.setTextoW("No puede apostar tanto");
                w.setVisible(true);
            }
        }
        if (fase == 7)
        {
            if (Double.parseDouble(dinero.getValue().toString())<10)
            {
                dinero.setValue(10);
                Warnning w = new Warnning();
                w.setTextoW("La apuesta minima son 10$");
                w.setVisible(true);
            }
            if (Double.parseDouble(dinero.getValue().toString())>jugador.getSaldo())
            {
                dinero.setValue(jugador.getSaldo());
                Warnning w = new Warnning();
                w.setTextoW("No puede apostar tanto");
                w.setVisible(true);
            }
        }
    }//GEN-LAST:event_dineroStateChanged

    private void j4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j4MouseClicked
        if (fase == 6)
        {
            contador=4;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 5 & control[3])
        {
            control[3]=false;
            orden[3]=contador;
            cartasJ.addAll(b.darCartas(1));
            j4.setIcon(cartasJ.get(cartasJ.size()-1).getImagen());
            if (contador==4)
            {
                fase =6;
                contador=0;
                txt.setText("Seleccione luna carta para descartar");
                txtb.setText("(Nada seleccionado) Si no desea descartar ninguna carta pulse pasar");
            }
            else 
                contador++;
        }
    }//GEN-LAST:event_j4MouseClicked

    private void j5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_j5MouseClicked
        if (fase == 6)
        {
            contador=5;
            txtb.setText("Seleccionado: "+cartasJ.get(contador-1).toString()+" pulse el mazo para borrar selección");
        }
        if (fase == 5 & control[4])
        {
            control[4]=false;
            orden[4]=contador;
            cartasJ.addAll(b.darCartas(1));
            j5.setIcon(cartasJ.get(cartasJ.size()-1).getImagen());
            if (contador==4)
            {
                fase =6;
                contador=0;
                txt.setText("Seleccione luna carta para descartar");
                txtb.setText("(Nada seleccionado) Si no desea descartar ninguna carta pulse pasar");
            }
            else 
                contador++;
        }
    }//GEN-LAST:event_j5MouseClicked
    
    private static Jugador jugador;
    
    public static void setJugador (Jugador jugador)
    {
        Game.jugador=jugador;
    }
    
    public void actualizar()
    {
        nombre.setText(jugador.getNombre()+jugador.getApellidos());
        saldo.setText("Saldo: "+jugador.getSaldo()+"$");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Game.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> {
            new Game().setVisible(true);
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton apostar;
    private javax.swing.JLabel d1;
    private javax.swing.JLabel d2;
    private javax.swing.JButton descartar;
    private javax.swing.JSpinner dinero;
    private javax.swing.JLabel j1;
    private javax.swing.JLabel j2;
    private javax.swing.JLabel j3;
    private javax.swing.JLabel j4;
    private javax.swing.JLabel j5;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel20;
    private javax.swing.JPanel jPanel21;
    private javax.swing.JPanel jPanel22;
    private javax.swing.JPanel jPanel23;
    private javax.swing.JPanel jPanel24;
    private javax.swing.JPanel jPanel25;
    private javax.swing.JPanel jPanel26;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel29;
    private javax.swing.JPanel jPanel30;
    private javax.swing.JPanel jPanel31;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JLabel m1;
    private javax.swing.JLabel m2;
    private javax.swing.JLabel m3;
    private javax.swing.JLabel m4;
    private javax.swing.JLabel m5;
    private javax.swing.JLabel mazo;
    private javax.swing.JLabel nombre;
    private javax.swing.JButton pasar;
    private javax.swing.JLabel saldo;
    private javax.swing.JButton salir;
    private javax.swing.JLabel txt;
    private javax.swing.JLabel txtb;
    // End of variables declaration//GEN-END:variables
}
